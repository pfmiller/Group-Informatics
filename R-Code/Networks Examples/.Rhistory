install.packages("Matrix")
library(Matrix)
setwd("~/GitHub/Group-Informatics/R-Code/Networks Examples")
gitLists <- 1
for (i in 1:length(gitLists))
{
filename <- "edgelist-topforums-1884113.csv"
el <- read.csv(filename, header=TRUE, row.names=NULL)
###These lines added because the node names are numeric, and
## R interprets them as ints by default
el$source <- as.character(el$source)
el$target <- as.character(el$target)
###
elM <- as.matrix(el)
library(Matrix)
A <- spMatrix(nrow=length(unique(el$source)),
ncol=length(unique(el$target)),
i = as.numeric(factor(el$source)),
j = as.numeric(factor(el$target)),
x = rep(1, length(as.numeric(el$source))) )
row.names(A) <- levels(factor(el$source))
colnames(A) <- levels(factor(el$target))
A
Arow <- A %*% t(A)
Acol <- t(A) %*% A
library(igraph)
iA <- graph.incidence(A, mode=c("all"))  ###very dense
iA <- delete.vertices(iA, V(iA)[ degree(iA)<30])
plot(iA, layout=layout.kamada.kawai)
### This generates an error
### Error in graph.bipartite(xs) :
########(list) object cannot be coerced to type 'logical'
xs <- bipartite.projection(iA)
print(xs[[1]], g=TRUE, e=TRUE)
print(xs[[2]], g=TRUE, e=TRUE)
}
install.packages("igraph")
library(Matrix)
setwd("~/GitHub/Group-Informatics/R-Code/Networks Examples")
gitLists <- 1
for (i in 1:length(gitLists))
{
filename <- "edgelist-topforums-1884113.csv"
el <- read.csv(filename, header=TRUE, row.names=NULL)
###These lines added because the node names are numeric, and
## R interprets them as ints by default
el$source <- as.character(el$source)
el$target <- as.character(el$target)
###
elM <- as.matrix(el)
library(Matrix)
A <- spMatrix(nrow=length(unique(el$source)),
ncol=length(unique(el$target)),
i = as.numeric(factor(el$source)),
j = as.numeric(factor(el$target)),
x = rep(1, length(as.numeric(el$source))) )
row.names(A) <- levels(factor(el$source))
colnames(A) <- levels(factor(el$target))
A
Arow <- A %*% t(A)
Acol <- t(A) %*% A
library(igraph)
iA <- graph.incidence(A, mode=c("all"))  ###very dense
iA <- delete.vertices(iA, V(iA)[ degree(iA)<30])
plot(iA, layout=layout.kamada.kawai)
### This generates an error
### Error in graph.bipartite(xs) :
########(list) object cannot be coerced to type 'logical'
xs <- bipartite.projection(iA)
print(xs[[1]], g=TRUE, e=TRUE)
print(xs[[2]], g=TRUE, e=TRUE)
}
library(Matrix)
setwd("~/GitHub/Group-Informatics/R-Code/Networks Examples")
gitLists <- 1
for (i in 1:length(gitLists))
{
filename <- "edgelist-topforums-1884113.csv"
el <- read.csv(filename, header=TRUE, row.names=NULL)
###These lines added because the node names are numeric, and
## R interprets them as ints by default
el$source <- as.character(el$source)
el$target <- as.character(el$target)
###
elM <- as.matrix(el)
library(Matrix)
A <- spMatrix(nrow=length(unique(el$source)),
ncol=length(unique(el$target)),
i = as.numeric(factor(el$source)),
j = as.numeric(factor(el$target)),
x = rep(1, length(as.numeric(el$source))) )
row.names(A) <- levels(factor(el$source))
colnames(A) <- levels(factor(el$target))
A
Arow <- A %*% t(A)
Acol <- t(A) %*% A
library(igraph)
iA <- graph.incidence(A, mode=c("all"))  ###very dense
iA <- delete.vertices(iA, V(iA)[ degree(iA)<30])
viz1=paste("output/",filename,"viz1",i,".png")
png(viz1)
plot(iA, layout=layout.kamada.kawai)
dev.off()
### This generates an error
### Error in graph.bipartite(xs) :
########(list) object cannot be coerced to type 'logical'
xs <- bipartite.projection(iA)
print(xs[[1]], g=TRUE, e=TRUE)
print(xs[[2]], g=TRUE, e=TRUE)
}
A
xs <- bipartite.projection(iA)
xs
plot(xs)
plot(elM)
elM
viz1a=paste("output/",filename,"viz1a",i,".png")
png(viz1a)
plot(elM, layout=layout.kamada.kawai)
dev.off()
library(Matrix)
setwd("~/GitHub/Group-Informatics/R-Code/Networks Examples")
gitLists <- 1
for (i in 1:length(gitLists))
{
filename <- "edgelist-topforums-1884113.csv"
el <- read.csv(filename, header=TRUE, row.names=NULL)
###These lines added because the node names are numeric, and
## R interprets them as ints by default
el$source <- as.character(el$source)
el$target <- as.character(el$target)
###
elM <- as.matrix(el)
plot(elM)
library(Matrix)
A <- spMatrix(nrow=length(unique(el$source)),
ncol=length(unique(el$target)),
i = as.numeric(factor(el$source)),
j = as.numeric(factor(el$target)),
x = rep(1, length(as.numeric(el$source))) )
row.names(A) <- levels(factor(el$source))
colnames(A) <- levels(factor(el$target))
A
Arow <- A %*% t(A)
Acol <- t(A) %*% A
library(igraph)
iA <- graph.incidence(A, mode=c("all"))  ###very dense
iA <- delete.vertices(iA, V(iA)[ degree(iA)<30])
viz1=paste("output/",filename,"viz1",i,".png")
png(viz1)
plot(iA, layout=layout.kamada.kawai)
dev.off()
viz1a=paste("output/",filename,"viz1a",i,".png")
png(viz1a)
plot(elM, layout=layout.kamada.kawai)
dev.off()
}
jivethreadmessagedistribution <- read.csv("jivethreadmessagedistribution.csv")
plot(jivethreadmessagedistribution$threadID, log(jivethreadmessagedistribution$counter))
jive2 <- read.csv("mathforum-c.csv")
plot(jive2$threadID, log(jive2$counter))
library(Matrix)
setwd("~/GitHub/Group-Informatics/R-Code/Networks Examples")
gitLists <- 1
for (i in 1:length(gitLists))
{
filename <- "edgelist-topforums-1884113.csv"
el <- read.csv(filename, header=TRUE, row.names=NULL)
###These lines added because the node names are numeric, and
## R interprets them as ints by default
el$source <- as.character(el$source)
el$target <- as.character(el$target)
###
elM <- as.matrix(el)
plot(elM)
library(Matrix)
A <- spMatrix(nrow=length(unique(el$source)),
ncol=length(unique(el$target)),
i = as.numeric(factor(el$source)),
j = as.numeric(factor(el$target)),
x = rep(1, length(as.numeric(el$source))) )
row.names(A) <- levels(factor(el$source))
colnames(A) <- levels(factor(el$target))
A
Arow <- A %*% t(A)
Acol <- t(A) %*% A
library(igraph)
iA <- graph.incidence(A, mode=c("all"))  ###very dense
iA <- delete.vertices(iA, V(iA)[ degree(iA)<30])
viz1=paste("output/",filename,"viz1",i,".png")
png(viz1)
plot(iA, layout=layout.kamada.kawai)
dev.off()
viz1a=paste("output/",filename,"viz1a",i,".png")
png(viz1a)
plot(elM)
dev.off()
}
getwd()
# library
library(ggplot2)
# Datasets
prc <- read.csv("http://ichart.finance.yahoo.com/table.csv?s=^GSPC&d=0&e=1&f=2013&g=m&a=0&b=1&c=1990&ignore=.csv", as.is=T)
vix <- read.csv("http://ichart.finance.yahoo.com/table.csv?s=%5EVIX&a=00&b=2&c=1990&d=0&e=1&f=2013&g=m&ignore=.csv", as.is=T)
# Data processing
prc$Date <- as.Date(prc$Date)
prc <- prc[, c(1,7)]
colnames(prc)[2] <-c("Value")
vix$Date <- as.Date(vix$Date)
vix <- vix[, c(1,5)]
colnames(vix)[2] <-c("VIX")
df <- merge(prc, vix)
df$year <- as.integer(substring(df$Date,1,4))
df$month <- as.integer(substring(df$Date,6,7))
# Graphs
par(mfrow=c(2,1))
plot(df$Date, df$Value, type="l",main="S&P500",  xlab="", ylab="")
plot(df$Date, df$VIX, type="l",main="VIX ( VOLATILITY S&P 500) ",  xlab="", ylab="")
# Erase
frame()
par(mfrow=c(1,1))
# ggplot2 base layer
p <- ggplot(df)
# Line graph
(p + geom_line(aes(x=Date, y=Value, colour=VIX)) +
scale_colour_gradient(low="blue", high="red")
)
# Bubble plots
(p + geom_point(aes(x = month, y = year, size = Value, colour = VIX),shape=16, alpha=0.80) +
scale_colour_gradient(limits = c(10, 60), low="blue", high="red", breaks= seq(10, 60, by = 10))  +
scale_x_continuous(breaks = 1:12, labels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(trans = "reverse")
)
# fin.
### Plotting gitHubbary over time
gitHubbary <- read.csv("gitHubbary-age-adjusted.csv")
# Box plots
png("gitHubbary-boxplots.png", width=625)
boxplot(gitHubbary[,4:9], las=1)
dev.off()
png("gitHubbary-boxplots.png", width=625)
boxplot(gitHubbary[,4:9], las=1)
dev.off()
gitHubbary <- png("gitHubbary-boxplots.png", width=625)
boxplot(gitHubbary[,4:9], las=1)
dev.off()
# Histograms
par(mfrow=c(6,1), las=1)
for (i in 4:9) {
hist(gitHubbary[,i], main=colnames(gitHubbary)[i], xlim=c(10,50))
}
library(ggplot2)
## This example is one way to look at teh quantitative filters one might use to pursue network analysis.
# Datasets
prc <- read.csv("http://ichart.finance.yahoo.com/table.csv?s=^GSPC&d=0&e=1&f=2013&g=m&a=0&b=1&c=1990&ignore=.csv", as.is=T)
vix <- read.csv("http://ichart.finance.yahoo.com/table.csv?s=%5EVIX&a=00&b=2&c=1990&d=0&e=1&f=2013&g=m&ignore=.csv", as.is=T)
# Data processing
prc$Date <- as.Date(prc$Date)
prc <- prc[, c(1,7)]
colnames(prc)[2] <-c("Value")
vix$Date <- as.Date(vix$Date)
vix <- vix[, c(1,5)]
colnames(vix)[2] <-c("VIX")
df <- merge(prc, vix)
df$year <- as.integer(substring(df$Date,1,4))
df$month <- as.integer(substring(df$Date,6,7))
# Graphs
par(mfrow=c(2,1))
plot(df$Date, df$Value, type="l",main="S&P500",  xlab="", ylab="")
plot(df$Date, df$VIX, type="l",main="VIX ( VOLATILITY S&P 500) ",  xlab="", ylab="")
# Erase
frame()
par(mfrow=c(1,1))
# ggplot2 base layer
p <- ggplot(df)
# Line graph
(p + geom_line(aes(x=Date, y=Value, colour=VIX)) +
scale_colour_gradient(low="blue", high="red")
)
# Bubble plots
(p + geom_point(aes(x = month, y = year, size = Value, colour = VIX),shape=16, alpha=0.80) +
scale_colour_gradient(limits = c(10, 60), low="blue", high="red", breaks= seq(10, 60, by = 10))  +
scale_x_continuous(breaks = 1:12, labels=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +
scale_y_continuous(trans = "reverse")
)
clusterBoy <- read.csv("postCountByForumDateandPerson.csv")
clusterBoy[order(clusterBoy$PostDate),]
symbols(clusterBoy$counter, clusterBoy$userID, circles=1)
clusterBoy <- read.csv("postCountByForumDateandPerson.csv")
clusterBoy[order(clusterBoy$PostDate),]
symbols(clusterBoy$counter, clusterBoy$userID, circles=1)
# Load data
crime <- read.csv("crimeRatesByState2008.csv", header=TRUE, sep="\t")
symbols(crime$murder, crime$burglary, circles=1)
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$burglary, circles=radius)
# Load data
crime <- read.csv("crimeRatesByState2008.csv", header=TRUE, sep="\t")
symbols(crime$murder, crime$burglary, circles=radius)
# Wrong sizes for radius
symbols(crime$murder, crime$burglary, circles=crime$population/1000)
# Correctly sized bubbles
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$burglary, circles=radius)
# Try squares
symbols(crime$murder, crime$burglary, squares=sqrt(crime$population), inches=0.5)
# Size circles smaller
symbols(crime$murder, crime$burglary, circles=radius, inches=0.35, fg="white", bg="red", xlab="Murder Rate", ylab="Burglary Rate")
# Add labels
text(crime$murder, crime$burglary, crime$state, cex=0.5)
### Venn diagram
plot(0, type="n", xlim=c(20,90), ylim=c(20,90), bty="n", xlab="", xaxt="n", yaxt="n", ylab="", asp=1)
rect(0,0,100,100,col="#000000")
colors <- c("#ffff0095", "#ff000095")
symbols(c(45,65), c(55,55), circles=c(20,20), add=TRUE, bg=colors, fg=colors, inches=FALSE)
### Area plot
plot(0, type="n", xlim=c(0,100), ylim=c(0,50), bty="n", xlab="time", ylab="y", las=1)
polygon(c(60,80,100,60), c(0,20,0,0), col="#ffff0095", border=NA)
polygon(c(30,60,90,30), c(0,30,0,0), col="#0000ff95", border=NA)
polygon(c(0,30,60,0), c(0,40,0,0), col="#ff000095", border=NA)
### Plotting obesity over time
obesity <- read.csv("obesity-age-adjusted.csv")
# Box plots
png("obesity-boxplots.png", width=625)
boxplot(obesity[,4:9], las=1)
dev.off()
# Histograms
par(mfrow=c(6,1), las=1)
for (i in 4:9) {
hist(obesity[,i], main=colnames(obesity)[i], xlim=c(10,50))
}
# Time series for each county, without transparency
png("obesity-time.png", width=625)
plot(0, 0, xlim=c(2005,2009), ylim=c(0,50), type="n", las=1, xlab="year", ylab="obesity rate", bty="n")
for (i in 1:length(obesity[,1])) {
lines(2005:2009, obesity[i,5:9], col="#000000")
}
dev.off()
# Time series for each county, with transparency
png("obesity-time-trans.png", width=1625)
plot(0, 0, xlim=c(2005,2009), ylim=c(0,50), type="n", las=1, xlab="year", ylab="obesity rate", bty="n")
for (i in 1:length(obesity[,1])) {
lines(2005:2009, obesity[i,5:9], col="#00000006")
}
dev.off()
### Accidents map, requires 'foreign' and 'maps' packages
library(foreign)
library(maps)
years <- 2001:2010
# Combine accident data from 2001 through 2010
latitude <- c()
longitude <- c()
for (y in years) {
file_loc <- paste("crashes/accident", y, ".dbf", sep="")
acc <- read.dbf(file_loc)
if (y < 2008) {
latitude <- c(latitude, acc$latitude)
longitude <- c(longitude, acc$longitud)
} else {
latitude <- c(latitude, acc$LATITUDE)
longitude <- c(longitude, acc$LONGITUD)
}
}
accidents <- data.frame(cbind(latitude, longitude))
# Map without transparency
png("crashes-map.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#000000", pch=21, cex=0.30)
dev.off()
library(foreign)
library(maps)
years <- 2001:2010
# Combine accident data from 2001 through 2010
install.packages("maps")
install.packages(maps)
library(foreign)
library(maps)
years <- 2001:2010
# Combine accident data from 2001 through 2010
latitude <- c()
longitude <- c()
for (y in years) {
file_loc <- paste("crashes/accident", y, ".dbf", sep="")
acc <- read.dbf(file_loc)
if (y < 2008) {
latitude <- c(latitude, acc$latitude)
longitude <- c(longitude, acc$longitud)
} else {
latitude <- c(latitude, acc$LATITUDE)
longitude <- c(longitude, acc$LONGITUD)
}
}
for (y in years) {
file_loc <- paste("crashes/accident", y, ".dbf", sep="")
acc <- read.dbf(file_loc)
if (y < 2008) {
latitude <- c(latitude, acc$latitude)
longitude <- c(longitude, acc$longitud)
} else {
latitude <- c(latitude, acc$LATITUDE)
longitude <- c(longitude, acc$LONGITUD)
}
}
accidents <- data.frame(cbind(latitude, longitude))
# Map without transparency
png("crashes-map.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#000000", pch=21, cex=0.30)
dev.off()
install.packages("mapproj")
install.packages("mapproj")
# Map without transparency
png("crashes-map.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#000000", pch=21, cex=0.30)
dev.off()
# Map with transparency
png("crashes-map-trans.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#00000030", pch=21, cex=0.30)
dev.off()
library(mapproj)
for (y in years) {
file_loc <- paste("crashes/accident", y, ".dbf", sep="")
acc <- read.dbf(file_loc)
if (y < 2008) {
latitude <- c(latitude, acc$latitude)
longitude <- c(longitude, acc$longitud)
} else {
latitude <- c(latitude, acc$LATITUDE)
longitude <- c(longitude, acc$LONGITUD)
}
}
accidents <- data.frame(cbind(latitude, longitude))
# Map without transparency
png("crashes-map.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#000000", pch=21, cex=0.30)
dev.off()
# Map with transparency
png("crashes-map-trans.png", width=1200, height=800)
map("state", proj="albers", param=c(39, 45), lwd=1, col="#f0f0f0")
points(mapproject(accidents$longitude, accidents$latitude), col=NA, bg="#00000030", pch=21, cex=0.30)
dev.off()
require(zoo)
data = data.frame(date = as.Date(c('2007-11-05', '2007-12-08', '2008-03-10', '2008-03-11')), value = c(134, 234, 322, 123))
data = zoo(data$value, data$date)
days = seq(start(data), end(data), "day")
data2 = na.locf(merge(data, zoo(,days)))
plot(data2)
plot(data2)
library(lattice)
library(latticeExtra)
data(Chem97, package = "mlmRev")
bwplot(factor(score) ~ gcsescore | gender, data=Chem97, xlab="Average GCSE Score")
clusterBoy <- read.csv("postCountByForumDateandPerson.csv")
clusterBoy[order(clusterBoy$PostDate),]
bwplot(Days ~ log(FSC.H), gvhd10, panel=panel.violin, box.ratio=3)
bwplot(PostDate | threadID, clusterBoy, panel=panel.violin, box.ration=3)
library(lattice)
library(latticeExtra)
data(Chem97, package = "mlmRev")
install.packages("mlmRev")
data(Chem97, package = "mlmRev")
bwplot(factor(score) ~ gcsescore | gender, data=Chem97, xlab="Average GCSE Score")
clusterBoy <- read.csv("postCountByForumDateandPerson.csv")
clusterBoy[order(clusterBoy$PostDate),]
bwplot(Days ~ log(FSC.H), gvhd10, panel=panel.violin, box.ratio=3)
bwplot(PostDate | threadID, clusterBoy, panel=panel.violin, box.ration=3)
Chem97
str(Chem97)
clusterBoy <- read.csv("postCountByForumDateandPerson.csv")
clusterBoy[order(clusterBoy$PostDate),]
bwplot(Days ~ log(FSC.H), gvhd10, panel=panel.violin, box.ratio=3)
bwplot(PostDate | threadID, clusterBoy, panel=panel.violin, box.ration=3)
str(clusterBoy)
bwplot(PostDate ~ threadID, clusterBoy, panel=panel.violin, box.ration=3)
?bwplot
library(ggplot2)
#Bubble Chart
data <- textConnection("Month,Series 1,Series 2,Value
Jan,3.9543031342,3.9562676987,4.1058940301
Feb,9.9728079932,2.9912424739,7.7609955473
Mar,2.9840194434,3.8122830028,9.0522239916
Apr,2.4148084549,3.0404574145,0.7286977116
May,5.685720793,0.9677886777,7.222444592
Jun,9.9094119668,5.6243130472,7.6263150014
Jul,7.4870035704,7.8294275608,5.4762881855
Aug,4.0690666856,9.1890754923,9.9755757954
Sep,8.8038171316,0.7918713801,9.5024713082
Oct,5.7545989705,8.982290877,8.0353516852
Nov,7.5449426472,5.3628405277,0.155836856
Dec,7.8511308506,3.2607904961,9.1500398843
")
data <- read.csv(data, h=T)
data$Month <- factor(data$Month, data$Month)
p <- ggplot(aes(x=Series.1, y=Series.2, size=Value, colour="blue"), data=data)
p + geom_point() +
scale_colour_identity() +
scale_size_continuous('Legend Title', range = c(0, 20)) +
labs(x="X Label", y="Y Label", title="An Example Bubble Chart")
# full output: http://www.yaksis.com/static/img/03/large/BubbleChart.png
p
# Load data
crime <- read.csv("crimeRatesByState2008.csv", header=TRUE, sep="\t")
symbols(crime$murder, crime$motor_vehicle_theft, circles=1)
# Correctly sized bubbles
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$motor_vehicle_theft, circles=radius)
# Size circles smaller
symbols(crime$murder, crime$motor_vehicle_theft, circles=radius, inches=0.35, fg="white", bg="red", xlab="Murder Rate", ylab="Motor Vehicle Theft Rate")
text(crime$murder, crime$motor_vehicle_theft, crime$state, cex=0.5)
